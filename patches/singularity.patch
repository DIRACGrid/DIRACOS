From ecdf4c327b2b4ec2996d004abbc909e9539d9662 Mon Sep 17 00:00:00 2001
From: Chris Burr <christopher.burr@cern.ch>
Date: Fri, 7 Feb 2020 13:46:41 +0000
Subject: [PATCH] Remove network/setuid support and make runtime relocatable

---
 0001-Make-runtime-relocatable.patch |  152 +++++++++++++++++++++++++++++++++++
 singularity.spec                    |    8 +-
 2 files changed, 157 insertions(+), 3 deletions(-)
 create mode 100644 0001-Make-runtime-relocatable.patch

diff --git a/0001-Make-runtime-relocatable.patch b/0001-Make-runtime-relocatable.patch
new file mode 100644
index 0000000..5808687
--- /dev/null
+++ b/0001-Make-runtime-relocatable.patch
@@ -0,0 +1,152 @@
+From bcc3273f3c7c6c62f330a7cdec17e818173e96da Mon Sep 17 00:00:00 2001
+From: Chris Burr <christopher.burr@cern.ch>
+Date: Fri, 7 Feb 2020 15:25:10 +0100
+Subject: [PATCH] Make runtime relocatable
+
+---
+ internal/pkg/buildcfg/confgen/gen.go | 90 +++++++++++++++++++++++++---
+ internal/pkg/plugin/meta.go          |  2 +-
+ 2 files changed, 83 insertions(+), 9 deletions(-)
+
+diff --git a/internal/pkg/buildcfg/confgen/gen.go b/internal/pkg/buildcfg/confgen/gen.go
+index d492e4bf3..d28d71fb7 100644
+--- a/internal/pkg/buildcfg/confgen/gen.go
++++ b/internal/pkg/buildcfg/confgen/gen.go
+@@ -30,20 +30,75 @@ type Define struct {
+ 
+ // WriteLine writes a line of configuration.
+ func (d Define) WriteLine() (s string) {
+-	s = "const " + d.Words[1] + " = " + d.Words[2]
+-
+-	if len(d.Words) > 3 {
++	if len(d.Words) == 3 && len(d.Words[2]) == 1 {
++		s = "const " + d.Words[1] + " = " + d.Words[2]
++	} else {
++		s = d.Words[2]
++		for _, w := range d.Words[3:] {
++			s += " + " + w
++		}
++		s = "var " + d.Words[1] + " = RelocatePath(" + s + ")"
+ 	}
+ 
+-	for _, w := range d.Words[3:] {
+-		s += " + " + w
+-	}
+ 	return s
+ }
+ 
+ var confgenTemplate = template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT.
+ package buildcfg
+-{{ range $i, $d := . }}
++
++import (
++	"os"
++	"path/filepath"
++	"strings"
++)
++
++func RelocatePath(original string) (string) {
++	if ! strings.HasPrefix(original, "{{.Prefix}}") {
++		return original
++	}
++
++	executablePath, err := os.Executable()
++	if err != nil {
++		panic(err)
++	}
++	prefix := filepath.Dir(executablePath)
++
++	switch filepath.Base(executablePath) {
++	case "singularity":
++		// PREFIX/bin/singularity
++		prefix = filepath.Dir(prefix)
++	case "starter":
++		// PREFIX/libexec/singularity/bin/starter
++		prefix = filepath.Dir(filepath.Dir(filepath.Dir(prefix)))
++	case "bash_completion":
++		return original
++	case "docs":
++		return original
++	default:
++		panic("Unrecognised executable: " + executablePath)
++	}
++
++	// CentOS likes to package the binaries in /usr
++	if filepath.Base(prefix) == "usr"  {
++		prefix = filepath.Dir(prefix)
++	}
++
++	if "{{.Prefix}}" == "/" {
++		if strings.HasPrefix(original, prefix) {
++			return original
++		}
++	}
++
++	relativePath, err := filepath.Rel("{{.Prefix}}", original)
++	if err != nil {
++		panic(err)
++	}
++
++	result := filepath.Join(prefix, relativePath)
++	return result
++}
++
++{{ range $i, $d := .Defines }}
+ {{$d.WriteLine -}}
+ {{end}}
+ `))
+@@ -64,12 +119,22 @@ func main() {
+ 
+ 	header := []Define{}
+ 	s := bufio.NewScanner(bytes.NewReader(inFile))
++	prefix := ""
+ 	for s.Scan() {
+ 		d := parseLine(s.Text())
+ 		if len(d.Words) > 2 && d.Words[0] == "#define" {
++			if d.Words[1] == "PREFIX" {
++				if len(d.Words) != 3 {
++					panic("Expected PREFIX to contain 3 elements")
++				}
++				prefix = d.Words[2]
++			}
+ 			header = append(header, d)
+ 		}
+ 	}
++	if prefix == "" {
++		panic("Failed to find value of PREFIX")
++	}
+ 
+ 	if goBuildTags := os.Getenv("GO_BUILD_TAGS"); goBuildTags != "" {
+ 		d := Define{
+@@ -82,5 +147,14 @@ func main() {
+ 		header = append(header, d)
+ 	}
+ 
+-	confgenTemplate.Execute(outFile, header)
++	data := struct {
++		Prefix string
++		Defines []Define
++	}{
++		// CentOS sets the prefix to be /usr despite putting some files outside
++		// prefix[1:len(prefix)-1],
++		"/",
++		header,
++	}
++	confgenTemplate.Execute(outFile, data)
+ }
+diff --git a/internal/pkg/plugin/meta.go b/internal/pkg/plugin/meta.go
+index 289cbafba..9b10e3d4d 100644
+--- a/internal/pkg/plugin/meta.go
++++ b/internal/pkg/plugin/meta.go
+@@ -20,7 +20,7 @@ import (
+ 	"github.com/sylabs/singularity/pkg/plugin"
+ )
+ 
+-const (
++var (
+ 	// dirRoot is the root directory for the plugin
+ 	// installation, typically located within LIBEXECDIR.
+ 	dirRoot = "singularity/plugin"
+-- 
+2.21.0
+
diff --git a/singularity.spec b/singularity.spec
index 8b5cbc4..11beb71 100644
--- a/singularity.spec
+++ b/singularity.spec
@@ -39,6 +39,7 @@ Source: %{name}-3.5.2.tar.gz
 # https://github.com/sylabs/singularity/pull/4769.patch
 Patch0: 4769.patch
 %endif
+Patch1: 0001-Make-runtime-relocatable.patch
 ExclusiveOS: linux
 # RPM_BUILD_ROOT wasn't being set ... for some reason
 %if "%{sles_version}" == "11"
@@ -103,10 +104,14 @@ cd $GOPATH/%{singgopath}
 %if 0%{?el8}
 patch -p1 <%{PATCH0}
 %endif
+patch -p1 <%{PATCH1}
 
 # Not all of these parameters currently have an effect, but they might be
 #  used someday.  They are the same parameters as in the configure macro.
 ./mconfig -V %{version}-%{release} \
+        -P release-stripped \
+        --without-suid \
+        --without-network \
         --prefix=%{_prefix} \
         --exec-prefix=%{_exec_prefix} \
         --bindir=%{_bindir} \
@@ -143,19 +148,16 @@ chmod 644 $RPM_BUILD_ROOT%{_sysconfdir}/singularity/actions/*
 %endif
 
 %files
-%attr(4755, root, root) %{_libexecdir}/singularity/bin/starter-suid
 %{_bindir}/singularity
 %{_bindir}/run-singularity
 %dir %{_libexecdir}/singularity
 %{_libexecdir}/singularity/bin/starter
-%{_libexecdir}/singularity/cni/*
 %dir %{_sysconfdir}/singularity
 %config(noreplace) %{_sysconfdir}/singularity/*.conf
 %config(noreplace) %{_sysconfdir}/singularity/*.toml
 %config(noreplace) %{_sysconfdir}/singularity/*.json
 %config(noreplace) %{_sysconfdir}/singularity/*.yaml
 %config(noreplace) %{_sysconfdir}/singularity/cgroups/*
-%config(noreplace) %{_sysconfdir}/singularity/network/*
 %config(noreplace) %{_sysconfdir}/singularity/seccomp-profiles/*
 %attr(755, root, root) %{_sysconfdir}/singularity/actions/exec
 %attr(755, root, root) %{_sysconfdir}/singularity/actions/run
-- 
1.7.1

