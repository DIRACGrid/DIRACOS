variables:
    EOS_PATH: "/eos/project/d/diracos/www/"

stages:
    - changelog
    - compile
    - links
    - test
    - deploy
    - push

changelog:
  stage: changelog
  tags:
    - docker
  image: cern/cc7-base
  except:
    - tags
  before_script:
    - curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
    - python get-pip.py
    - pip install -U requests python-dateutil pytz
  script:
    - echo "GITHUBTOKEN = \"$GITHUBTOKEN\"" >& GitTokens.py
    - export PYTHONPATH=$(pwd)
    - mkdir changes
    - curl -O https://raw.githubusercontent.com/DIRACGrid/DIRAC/integration/docs/diracdoctools/scripts/dirac-docs-get-release-notes.py
    - python dirac-docs-get-release-notes.py --sinceLatestTag -r DIRACGrid/DIRACOS --branches master > changes/PRs.txt
    - sed -i '1,2d' changes/PRs.txt
    - cat changes/PRs.txt | cat - release.notes > temp
    - source ./docs/Tools/CreateName.sh
    - echo -n "[${BUILD_NAME}]" | cat - temp > changes/release.notes

  artifacts:
    paths:
      - changes

compile:
  stage: compile
  dependencies:
    - changelog
  retry: 2
  tags:
    - DIRACOS
  except:
    - tags
  image: centos:6
  script:
    - source ./docs/Tools/CreateName.sh
    - sed -i "2s/master/${BUILD_NAME}/" config/diracos.json
    - cp config/diracos.json changes/diracos.json
    - yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpm
    - yum install -y mock rpm-build fedora-packager createrepo python-pip
    - export DIRACOS_REPO=/diracos_repo
    - mkdir -p $DIRACOS_REPO/i386 $DIRACOS_REPO/i686 $DIRACOS_REPO/src $DIRACOS_REPO/noarch $DIRACOS_REPO/x86_64 $DIRACOS_REPO/bootstrap $DIRACOS_REPO/buildOnly
    - curl -o $DIRACOS_REPO/bootstrap/lbzip2-2.5-2.el6.x86_64.rpm -L https://diracos.web.cern.ch/diracos/bootstrap/lbzip2-2.5-2.el6.x86_64.rpm
    - curl -o $DIRACOS_REPO/bootstrap/pigz-2.3.4-1.el6.x86_64.rpm -L https://diracos.web.cern.ch/diracos/bootstrap/pigz-2.3.4-1.el6.x86_64.rpm
    - createrepo $DIRACOS_REPO
    - pip install git+${CI_REPOSITORY_URL}@${CI_COMMIT_REF_NAME}
    - sed -i -e 's/-j4/-j16/g' mockConfigs/mock-build-diracos.cfg
    - dos-build-all-rpms config/diracos.json
    - dos-fix-pip-versions config/diracos.json
    - mkdir -p public/releases
    - mkdir -p public/RPMs
    - if [[ "${CI_COMMIT_REF_NAME}" == "master" ]]; then cp /var/lib/mock/epel-6-x86_64-install/root/tmp/fixed_requirements.txt public/releases/requirements_master.txt ; fi
    - cp /var/lib/mock/epel-6-x86_64-install/root/tmp/fixed_requirements.txt changes/requirements.txt
    - cp /var/lib/mock/epel-6-x86_64-install/root/tmp/fixed_requirements.txt config/requirements.txt
    - dos-build-python-modules config/diracos.json
    - dos-bundle config/diracos.json
    - cp /var/lib/mock/epel-6-x86_64-install/root/tmp/diracos-${BUILD_NAME}.tar.gz public/releases/diracos-${BUILD_NAME}.tar.gz
    - cd public/releases
    - md5sum diracos-${BUILD_NAME}.tar.gz | awk {'print $1'} > diracos-${BUILD_NAME}.md5
    - cd ../..
    - tar -zcf public/RPMs/diracos-${BUILD_NAME}-RPMs.tar.gz /diracos_repo
    - cd public/RPMs/
    - md5sum diracos-${BUILD_NAME}-RPMs.tar.gz | awk {'print $1'} > diracos-${BUILD_NAME}-RPMs.md5
  artifacts:
    paths:
      - public
      - changes
    expire_in: 1 week

# Check links
check_links:
  stage: links
  dependencies:
    - compile
  tags:
    - docker
  except:
    - tags
  image: cern/slc6-base
  before_script:
    - yum install tar -y
  script:
    - source ./docs/Tools/CreateName.sh
    - tar xf public/releases/diracos-${BUILD_NAME}.tar.gz -C /tmp
    - export DIRACOS=/tmp/diracos
    - source $DIRACOS/diracosrc
    - ./tests/integration/test_symlink.sh

# Check dependencies
check_dependencies:
  stage: links
  dependencies:
    - compile
  tags:
    - docker
  except:
    - tags
  image: cern/slc6-base
  before_script:
    - yum install tar -y
  script:
    - source ./docs/Tools/CreateName.sh
    - tar xf public/releases/diracos-${BUILD_NAME}.tar.gz -C /tmp
    - export DIRACOS=/tmp/diracos
    - source $DIRACOS/diracosrc
    - ./tests/integration/test_ldd.sh

# Run tests

.run_test:
  stage: test
  dependencies:
    - compile
  tags:
    - docker
  except:
    - tags
  script:
    - source ./docs/Tools/CreateName.sh
    - tar xf public/releases/diracos-${BUILD_NAME}.tar.gz -C /tmp
    - export DIRACOS=/tmp/diracos
    - source $DIRACOS/diracosrc
    - pytest tests/integration/test_import.py
    - tests/integration/test_cli.sh

SLC6:
  extends: .run_test
  image: cern/slc6-base
  before_script:
    # graphical libraries needed for rrdtool
    - yum install -y tar freetype fontconfig pixman libXrender

CC7:
  extends: .run_test
  image: cern/cc7-base
  before_script:
    # graphical libraries needed for rrdtool
    - yum install -y freetype fontconfig pixman libXrender

CC8:
  extends: .run_test
  image: centos:8
  allow_failure: true
  before_script:
    # graphical libraries needed for rrdtool
    - yum install -y freetype fontconfig pixman libXrender

fedora-latest:
  extends: .run_test
  image: fedora:latest
  allow_failure: true
  before_script:
    # libnsl libxcrypt-compat: needed for ARC
    # compat-openssl10: needed for ssh
    - yum install -y libnsl libxcrypt-compat compat-openssl10
    # trick for ssh to work, with compat-openssl10
    # https://bugzilla.redhat.com/show_bug.cgi?id=1694850
    - export OPENSSL_CONF=/etc/pki/openssl10.cnf

ubuntu-latest:
  extends: .run_test
  image: ubuntu:latest
  allow_failure: true

.integration_tests:
  stage: test
  except:
    - tags
  dependencies:
    - compile
  tags:
    - DIRACOS
  image: diracgrid/docker-compose-dirac:latest
  before_script:
    - source ./docs/Tools/CreateName.sh

    # Clone DIRAC
    - git clone https://github.com/DIRACGrid/DIRAC.git
    - cd DIRAC
    - git checkout "${DIRAC_RELEASE}"
    - cd ..
    # Set environment variables
    - export CI_REGISTRY_IMAGE=diracgrid
    - export HOST_OS=${HOST_OS}
    - export CI_PROJECT_DIR=${PWD}/DIRAC
    - export CI_COMMIT_REF_NAME=refs/heads/${DIRAC_RELEASE}
    - export MYSQL_VER=${MYSQL_VER}
    - export ES_VER=${ES_VER}
    - export DIRACOSVER=${BUILD_NAME}
    - export DIRACOS_TARBALL_PATH="/"
    # Prepare for docker in docker
    - unset DOCKER_HOST
    - mkdir -p $PWD/docker-data /var/lib
    - ln -s $PWD/docker-data /var/lib/docker
    - apk add --no-cache btrfs-progs e2fsprogs e2fsprogs-extra iptables openssl shadow-uidmap xfsprogs xz pigz
    - dockerd >/dev/null 2>&1 &
    - sleep 10
    # Activate the DIRAC testing environment
    - source DIRAC/tests/CI/run_docker_setup.sh
    - prepareEnvironment
    # Copy the DIRAC OS tarball into the containers
    - docker cp "${CI_PROJECT_DIR}/../public/releases/diracos-${BUILD_NAME}.tar.gz" server:/
    - docker cp "${CI_PROJECT_DIR}/../public/releases/diracos-${BUILD_NAME}.md5" server:/
    - docker exec -u root server chown dirac /diracos-${BUILD_NAME}.{tar.gz,md5}
    - docker cp "${CI_PROJECT_DIR}/../public/releases/diracos-${BUILD_NAME}.tar.gz" client:/
    - docker cp "${CI_PROJECT_DIR}/../public/releases/diracos-${BUILD_NAME}.md5" client:/
    - docker exec -u root client chown dirac /diracos-${BUILD_NAME}.{tar.gz,md5}
  script:
    - installServer
    - installClient
    - testServer
    - testClient
    - checkErrors

integration_tests_slc6:
  extends: .integration_tests
  variables:
    MYSQL_VER: "5.7"
    HOST_OS: slc6
    DIRAC_RELEASE: master

integration_tests_cc7:
  extends: .integration_tests
  variables:
    MYSQL_VER: "5.7"
    HOST_OS: cc7
    DIRAC_RELEASE: master

# integration_tests_c8:
#   extends: .integration_tests
#   allow_failure: true
#   variables:
#     MYSQL_VER: "5.7"
#     HOST_OS: c8
#     DIRAC_RELEASE: master

########### CHRIS
# Run the dyn tests as a separate test for the time being, so to allow it to fail
# later on, merge it with .run_test

# Download the integration code of DIRAC, and dynamically check the dependencies
.run_dyn_test:
  stage: test
  dependencies:
    - compile
  tags:
    - docker
  except:
    - tags
  script:
    - curl --output /tmp/integration.zip -L https://github.com/DIRACGrid/DIRAC/archive/integration.zip
    - unzip -d /tmp/  /tmp/integration.zip
    - source ./docs/Tools/CreateName.sh
    - tar xf public/releases/diracos-${BUILD_NAME}.tar.gz -C /tmp
    - export DIRACOS=/tmp/diracos
    - source $DIRACOS/diracosrc
    - pip install findimports
    - DIRAC=/tmp/DIRAC-integration/ pytest tests/integration/test_dyn_import.py

dyn_SLC6:
  extends: .run_dyn_test
  image: cern/slc6-base
  before_script:
    # graphical libraries needed for rrdtool
    - yum install -y tar freetype fontconfig pixman libXrender unzip

dyn_CC7:
  extends: .run_dyn_test
  image: cern/cc7-base
  before_script:
    # graphical libraries needed for rrdtool
    - yum install -y freetype fontconfig pixman libXrender unzip

#######################################################################################


# Deploy to EOS folder
deployment:
    stage: deploy
    dependencies:
      - compile
    only:
      - branches@CLICdp/iLCDirac/DIRACOS
    # Custom docker image providing the needed tools to deploy in EOS
    image: gitlab-registry.cern.ch/ci-tools/ci-web-deployer:latest
    script:
        - deploy-eos
    # do not run any globally defined before_script or after_script for this step
    before_script: []
    after_script: []

# Update release notes and tag
push_tag:
  stage: push
  dependencies:
    - changelog
    - compile
  only:
    - branches@CLICdp/iLCDirac/DIRACOS
  tags:
    - docker
  variables:
    GIT_STRATEGY: none
  image: cern/cc7-base
  before_script:
    - curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
    - python get-pip.py
    - pip install requests
    - yum install git less -y
    - eval `ssh-agent -s`
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KEY" | tr -d '\r' > /root/.ssh/id_rsa
    - chmod 700 /root/.ssh/id_rsa
    - ssh-keyscan -H github.com >> /root/.ssh/known_hosts
    - git config --global user.email "dirac.os@cern.ch"
    - git config --global user.name "DIRACOS"
    - git config --global pull.rebase true
  script:
    - git clone git@github.com:DIRACGrid/DIRACOS.git DIRACOS
    - cd DIRACOS
    - source ./docs/Tools/CreateName.sh
    - mkdir bundle
    - tar xf ../public/releases/diracos-${BUILD_NAME}.tar.gz -C bundle
    - git pull origin master
    - cp ../changes/release.notes release.notes
    - git add release.notes
    - git commit -m"Add release notes for ${BUILD_NAME}"
    - if $MAKE_TAG ; then git push origin master ; fi
    - cp ../changes/requirements.txt config/requirements.txt
    - cp ../changes/diracos.json config/diracos.json
    - git add config/requirements.txt
    - git add config/diracos.json
    - git commit -m"Update requirements.txt and diracos.json for release ${BUILD_NAME}"
    - git tag -a ${BUILD_NAME} -m "${BUILD_NAME}"
    - if $MAKE_TAG ; then git push origin --tags ; fi
    - echo "GITHUBTOKEN = \"$GITHUBTOKEN\"" >& GitTokens.py
    - export PYTHONPATH=$(pwd)
    - echo $'## This release contains the following PRs \n' > releaseText.txt
    - cat ../changes/PRs.txt >> releaseText.txt
    - echo $'## Included versions of packages \n' >> releaseText.txt
    - cat bundle/diracos/versions.txt >> releaseText.txt
    - cat releaseText.txt
    - if $MAKE_TAG ; then python dirac-docs-get-release-notes.py -r DIRACGrid/DIRACOS --tagName ${BUILD_NAME} --releaseNotes releaseText.txt --deployRelease ; fi
